// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicketIvoire.Administration.Infrastructure.Persistence;

#nullable disable

namespace TicketIvoire.Administration.Infrastructure.Migrations
{
    [DbContext(typeof(AdministrationDbContext))]
    [Migration("20250310183206_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TicketIvoire.Administration.Infrastructure.Persistence.LieuEvenements.LieuEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<long?>("Capacite")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RaisonsRetrait")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("LieuEvenements", "Administration");
                });

            modelBuilder.Entity("TicketIvoire.Administration.Infrastructure.Persistence.Membres.MembreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdhesion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EstActif")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short>("StatutAdhesion")
                        .HasColumnType("smallint");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Membres", (string)null);
                });

            modelBuilder.Entity("TicketIvoire.Administration.Infrastructure.Persistence.PropositionEvenements.PropositionEvenementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<short>("PropositionStatut")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UtilisateurId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("PropositionEvenements", (string)null);
                });

            modelBuilder.Entity("TicketIvoire.Administration.Infrastructure.Persistence.LieuEvenements.LieuEntity", b =>
                {
                    b.OwnsOne("TicketIvoire.Administration.Domain.LieuEvenements.LieuCoordonneesGeographiques", "CoordonneesGeographiques", b1 =>
                        {
                            b1.Property<Guid>("LieuEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Latitude")
                                .HasColumnType("numeric")
                                .HasColumnName("Latitude");

                            b1.Property<decimal>("Longitude")
                                .HasColumnType("numeric")
                                .HasColumnName("Longitude");

                            b1.HasKey("LieuEntityId");

                            b1.ToTable("LieuEvenements", "Administration");

                            b1.WithOwner()
                                .HasForeignKey("LieuEntityId");
                        });

                    b.Navigation("CoordonneesGeographiques");
                });

            modelBuilder.Entity("TicketIvoire.Administration.Infrastructure.Persistence.PropositionEvenements.PropositionEvenementEntity", b =>
                {
                    b.OwnsOne("TicketIvoire.Administration.Domain.PropositionEvenements.PropositionLieu", "Lieu", b1 =>
                        {
                            b1.Property<Guid>("PropositionEvenementEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<Guid?>("LieuEvenementId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Nom")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Ville")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("PropositionEvenementEntityId");

                            b1.ToTable("PropositionEvenements");

                            b1.WithOwner()
                                .HasForeignKey("PropositionEvenementEntityId");
                        });

                    b.OwnsOne("TicketIvoire.Administration.Infrastructure.Persistence.PropositionEvenements.PropositionDecisionEntity", "Decision", b1 =>
                        {
                            b1.Property<Guid>("PropositionEvenementEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("DateDecision")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Raisons")
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.Property<Guid>("UtilisateurId")
                                .HasColumnType("uuid");

                            b1.HasKey("PropositionEvenementEntityId");

                            b1.ToTable("PropositionEvenements");

                            b1.WithOwner()
                                .HasForeignKey("PropositionEvenementEntityId");
                        });

                    b.Navigation("Decision");

                    b.Navigation("Lieu")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
